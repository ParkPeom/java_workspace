스트림 데이터의 연속적인 흐름

데이터소스 - 스트림 만들기 - 중간연산(0~N번) - 최종연산(0~1번)

스트림이 제공하는 기능 - 중간 연산 과 최종 연산

중간연산 - 연산결과가 스트림인 연산 , 반복적으로 적용가능
최종연산 - 연산결과가 스트림이 아닌 연산 , 단 한번만 적용가능(스트림의 요소를 소모)


stream.distinct().limit(5).sorted().forEach(System.out::println)
      중복제거  5개자르기 정렬        출력-1번 

filter 걸러내기
distinct 중복제거
sort 정렬
stream.count();  // 최종연산 요소개수 세기 

1. 스트림은 데이터 소스로부터 데이터를 읽기만 할뿐 변경하지 않는다.

List<Integer> list = Arrays.asList(3,2,1,2,1);
List<Integer> sortedList = list.stream().sorted().collect(Collectors.toList());
  // LIst로 정렬해서 새로운 List에 저장

2. 스트림은 Iterator 처럼 일회용이다.(필요하면 다시 스트림을 생성해야 함)

strStream.forEach(System.out.::println); // 모든 요소를 화면에 출력(최종연산)
int numOfStr = strStream.count(); // 에러  스트림은 이미 닫혔음 

3. 최종 연산 전까지 중간연산이 수행되지 않는다 - 지연된 연산
IntStream intStream = new Random().ints(1,46); // 1~45범위의 무한 스트림
IntStream.distinct().limit(6).sorted(). // 중간연산 
		forEach(i->System.out.priunt(i+",")); // 최종연산

4. 스트림은 작업을 내부 반복처리한다.
	stream.forEach();
5. 병렬스트림 - 멀티쓰레드로 병렬처리 
.parallel() // 병렬 스트림으로 전환  , 그 반대  sequntiall
6. 기본형스트림 - IntStream ,LongStream,DoubleStream 등등 
  오토박싱 & 언박싱의 비효율 제거 (Stream<Integer> 대신 IntStream 사용)
1 -> new Integer(1) // 기본형 에서 참조형으로 
- 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공 

스트림 만들기 - 컬렉션 
1. 스트림 생성
2. 중간연산
3. 최종연산

스트림 만들기 - 컬렉션
Collection 인터페이스의 stream() 으로 컬렉션을 스트림으로 변환

List<Integer> list = Arrays.asList(1,2,3,4,5);
Stream<Integer> intStream = list.stream(); // List를 stream으로 변환

intStream.forEach(System.out::print); // (i) -> System.out.print(i);  
intStream.forEach(System.out::print); // 에러 이미 스트림이 이미 닫혔다.

스트림 만들기 - 배열 
- 객체 배열로부터 스트림 생성하기 

Stream<T> strStream = Stream.of("a","b","c"); // 가변인자

기본형 배열로부터 스트림 생성하기
IntStream IntStream.of(int... value) // 
IntStream Arrays.steam(int[]) 

String[] strArr = new String[] {"a","b","c","d"};
Stream<String> strStream = Stream.of(new String[] {"a","b","c","d"});
Stream<String> strStream = Stream.of(strArr);
strStream.forEach(System.out::println);
String<String> strStream = Arrays.stream(strArr);

int[] intArr ={1,2,3,4,5};
IntStream intStream = Arrays.stream(intArr);

Integer[] intArr ={1,2,3,4,5};
Stream<Integer> intStream = Arrays.stream(intArr);
intStream.forEach(System.out::println);
System.out.println(intStream.count()); // 최종연산
System.out.println(intStream.sum());
System.out.println(intStream.average());

스트림 만들기 - 임의의 수(난수)

지정된 범위의 난수를 요소로 갖는 스트림을 생성하는 메서드(Random 클래스)

특정 범위의 정수를 요소로 갖는 스트림 생성하기
IntStream IntStream.range(1 , 5); // 1,2,3,4
IntStream IntStream.rangeClosed(1 , 5); // 1,2,3,4,5  끝 포함 

람다식을 소스로 하는 스트림 생성하기 

iterate()는 이전 요소를 seed(초기값)로 해서 다음 요소를 계산
generate()는 seed(초기값)를 사용하지 않는다

파일과 빈 스트림 
파일을 소스로 하는 스트림 생성하기

Stream<Path> Files.list(Path.dir) // Path는 파일 또는 디렉토리

Stream<String> Files.lines(Path path) 
Stream<String> lines() // BufferedReader 클래스의 메서드 15장 

비어있는 스트림 생성하기
Stream emptyStream = Stream.empty(); // empty()는 빈 스트림을 생성해서 반환
long count = emptyStream.count(); // count 값은 0 

스트림의 연산
스트림이 제공하는 기능 - 중간연산-n번 과 최종연산 -1번
중간 연산 - 연산결과가 스트림인 연산 . 반복적으로 적용 가능
최종연산 - 연산결과가 스트림이 아닌 연산 . 단 한번만 적용 가능(스트림의 요소를 소모)




