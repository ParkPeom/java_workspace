
FileOutputStream 바이트씩 쓰기
FileWriter 


FileWriter에서 flush()와 close()의 차이점
FileWriter를 사용 후에는 flush()와 close()를 호출하는데요 두 메소드의 차이점에 대해 알아봅니다.

- flush() : FileWriter 내부 버퍼의 내용을 파일에 writer합니다. 
flush()를 호출하지 않는다면 내용이 버퍼에만 남고 파일에는 쓰이지 않는 상황이 나올 수 있습니다.

- close() : FileWriter는 스트림을 이용하여 파일의 내용을 읽어들입니다. 이때 close()를 호출하여 스트림을 닫으면 
그 스트림을 다시 이용하여 파일에 쓰는 것이 불가능합니다.

파일은 파일시스템이나 기타 다른 곳에 있으므로 이 내용을 스트림으로 읽어 들이는데 메모리를 소모합니다.
 작업이 끝나면 close()를 호출하여 스트림을 닫아 종료된 작업에 대해 메모리를 확보해야 합니다.
uffer가 다 차기 전에 프로그램을 종료하면 buffer에 들어있는 내용은 파일에 쓰여지지 않는다.

그 때 flush()를 호출하면 buffer의 내용이 파일에 쓰여진다. 

(강제적인 느낌이 물씬 풍긴다...)

flush()를 검색하다보니 같이 나오는 메소드가 바로 close()

flush()와 close()를 같이 쓰는데, 

사실 close 함수가 내부적으로 flush함수를 호출한다고 한다.

사용자가 원할 때 버퍼를 비워주는 것으로 버퍼를 비우는 것은 IO에서는 출력하는 것 이겠고, 네트워크에서는 버퍼의 내용을 

클라이언트나 서버로 보내는 것이겠지. 여기서 사용자가 원할 때라는 말이 포인트인 것 같다.

명령을 내리면 해당 명령의 스트림은 컴퓨터의 buffer (임시 메모리 위치)라는 메모리 위치에 저장됩니다. 모든 임시 메모리 위치가 가득 차면 
모든 데이터 스트림을 플러시하고 완전히 실행하고 버퍼 임시 위치의 새 스트림에 새 공간을 제공하는 flush ()를 사용합니다. -당신이 이해하기를 바랍니다

===================================================================================================================
사진
	natural1.jfif	
	natural2.jfif
	natural3.jfif
javaFile 에 있으면 exist메서드 를 써서 있으면 getName()
 경로, 파일명 얻어옴
. 기준으로 마지막에 있는 점 기준으로 앞에는 파일명 뒤에는 확장자
문자를 쪼개야한다. 번호를 붙여서 다시 합친다음 파일객체를 만들어야 한다.

. 의 위치를 구하는 맨뒤에서 lastIndexOf 하고 나서
SubString으로 .기준으로 앞에는 파일명 뒤에는 확장명 을 추출한다.
 	
오후
메모장은 한바이트씩 읽고 찍는데..
한바이트 읽고 읽다보니 깨지게 된다.
메모장으로 보는건 의미가 없다. 
잘못된 데이터가 아니다.


VO클래스를 직렬화 할수 있다. vo클래스에 implements Serializable

직렬화 Serializable

객체를 쓰기위해 writeObject(Object obj) 를 쓰는데 obj에 vo객체 를 넣는다.
임영진 = https://byul91oh.tistory.com/295
직렬화 = https://altongmon.tistory.com/276


RandomAccessFile(String name,String mode) 
  mode에서 객체를 만들때   r 읽기만  , w 쓰기만  , rw 읽기쓰기
    

접속을 하는것이 Socket , 접속을 기다리는것이 ServerSocket
A는 ip를 가지고 Server 에 접속해서 socket 을 리턴해준다. 
ServerSocket 는 다른사람의 접속을 받기 위해 접속을 기다린다. 

A는 서버의 IP를 알아야한다. 아이피를 알아서 접속을 하면
소켓을 생성을 하면 Server에서는 socket 에 자동으로 ip가 입력됨

통신과 관련된 패키지 
Package java.net
