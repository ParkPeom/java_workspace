package 싱글톤패턴;

// 단일 스레드 에서의 싱글톤 
// 정적 클래스의 형태로 사용 테스트를 위해 모의 객체를 만들고 
// 다른 목적으로 사용한다면 멀티쓰레드 환경에서 싱글톤을 사용하듯이 사용 

public class Printer {
	
	// 인스턴스를 제공하는 인스턴스 변수 모두 static 으로 선언된 정벅 변수 및 메서드
	// 기본생성자를 생성할수 없기 때문에 외부에서 인스턴스에 접근하려면
	// 클래스 변수 및 메서드에 접근을 허용해야 하기 때문에 두 메서드는 
	// 정적 타입으로 선언되어 있다.
	
	// 단점 : 멀티스레드 안전하지 않다
	// 여러 스레드가 공유 되고 있는 상황 아래의 블럭에서 조건문이 동시에 두번 돌수있기 떄문에
	// 하나의 인스턴스가 아닌 여러개의 인스턴스가 발생 할 위험이 있다.
	
	// 해결 - 멀티스레드 환경에서의 싱글톤 문제 해결 두가지
	// 1. 정적 변수에 인스턴스를 만들어 바로 초기화 
	// 2. 인스턴스를 만드는 메서드에 동기화 하는 방법
	// -> synchronized 라는 키워드 - 쓰레드에서 동기에 접근하는 것을 막음
	
	// 각 객체간의 결합도가 높아지고 변경에 대처할 수 없다.
	// 싱글톤 객체가 변경되면 이를 참조하고 있는 모든 값들이 변경되어야 하기 때문에
	// 멀티 쓰레드환경에서 대처가 어느정도 가능하지만 고려해야 할 요소가 많아 사용이 어렵고
	// 프로그램 전반에 걸쳐서 필요한 부분에만 사용한다면 장점이 있다
	// 그 포린트를 잡기 어려움
	
	private static Printer printer = null;
	
	private int count = 0;
	
	private Printer() {
		// 기본생성자를 private 를 사용하여 생성을 불가 
	}
	public static Printer getInstance() { // getInstance 를 통해 생성 가능 
		if (printer == null) {
			 printer = new Printer();
		}
		return printer; // 생성자를 리턴하는 형식으로 프로그램 전반에 하나의 인스턴스 유지
	}
	public void print(String input) {
		count++;
		System.out.println(input + "count : " + count);
	}
}
